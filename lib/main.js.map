{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,QAAA;;;;;;;;;;EAWA,QAAA,GACE;IAAA,sBAAA,EACE;MAAA,IAAA,EAAgB,IAAhB;MACA,OAAA,EAAgB,EADhB;MAEA,MAAA,EAAgB;IAFhB;EADF,EAZF;;;EAmBA,IAAC,CAAA,UAAD,GAAc,SAAA,CAAE,IAAF,EAAQ,GAAR,CAAA;AACd,QAAA,IAAA,EAAA,GAAA,EAAA;AAAE;IAAA,KAAA,QAAA;OAAI,CAAE,IAAF;MACF,MAAM;IADR;AAEA,WAAO;EAHK,EAnBd;;;EAyBA,IAAC,CAAA,yBAAD,GAA6B,SAAA,CAAE,IAAF,EAAQ,GAAR,CAAA;AAC7B,QAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAAA,aAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,KAAA,EAAA,OAAA,EAAA,OAAA,EAAA;IAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,sBAAjB,CAAwC,CAAE,GAAA,GAAM,CAAE,GAAA,QAAQ,CAAC,sBAAX,EAAsC,GAAA,GAAtC,CAAR,CAAxC;IACA,CAAA,CAAE,IAAF,EACE,OADF,EAEE,MAFF,CAAA,GAEe,GAFf,EADF;;IAKE,IAAG,IAAA,KAAQ,EAAX;MACE,MAAM,CAAA;QAAE,GAAA,EAAK,CAAP;QAAU,IAAA,EAAM,EAAhB;QAAoB,GAAA,EAAK;MAAzB,CAAA;AACN,aAAO,KAFT;KALF;;IASE,GAAA,GAAgB;IAChB,OAAA,GAAgB;IAChB,aAAA,GAAgB,IAAI,CAAC,MAAL,GAAc;AAE9B,WAAA,IAAA,GAAA;;MACE,GAAA,GAAM,OAAO,CAAC;MACd,IAAS,OAAO,CAAC,SAAR,GAAoB,aAA7B;AAAA,cAAA;;MACA,IAAa,qCAAb;AAAA,cAAA;;MACA,CAAE,MAAF,EAAU,IAAV,EAAgB,GAAhB,CAAA,GAAyB;MACzB,GAAA;MACA,IAAA,GAAQ,KAAK,CAAE,CAAF;MACb,IAA0B,IAA1B;QAAA,IAAA,GAAQ,IAAI,CAAC,OAAL,CAAA,EAAR;;MACA,IAA+B,OAAA,KAAY,EAA3C;QAAA,IAAA,GAAQ,OAAA,GAAU,KAAlB;;MACA,IAA+B,MAAA,KAAY,EAA3C;QAAA,IAAA,GAAQ,IAAA,GAAQ,OAAhB;;MACA,MAAM,CAAA,CAAE,GAAF,EAAO,IAAP,EAAa,GAAb,CAAA;IAVR,CAbF;;IAyBE,IAAG,gCAAH;MACE,GAAA;MACA,MAAM,CAAA;QAAE,GAAF;QAAO,IAAA,EAAM,EAAb;QAAiB,GAAA,EAAK;MAAtB,CAAA,EAFR;KAzBF;;AA6BE,WAAO;EA9BoB;AAzB7B",
  "sourcesContent": [
    "\n'use strict'\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# H.types.declare 'guy_str_walk_lines_cfg', tests:\n#   \"@isa.object x\":          ( x ) -> @isa.object x\n#   \"@isa.boolean x.trim\":    ( x ) -> @isa.boolean x.trim\n#   \"@isa.text x.prepend\":    ( x ) -> @isa.text x.prepend\n#   \"@isa.text x.append\":     ( x ) -> @isa.text x.append\n\n#-----------------------------------------------------------------------------------------------------------\ndefaults =\n  guy_str_walk_lines_cfg:\n    trim:           true\n    prepend:        ''\n    append:         ''\n\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines = ( text, cfg ) ->\n  for { line, } from @walk_lines_with_positions text, cfg\n    yield line\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@walk_lines_with_positions = ( text, cfg ) ->\n  H.types.validate.guy_str_walk_lines_cfg ( cfg = { defaults.guy_str_walk_lines_cfg..., cfg..., } )\n  { trim\n    prepend\n    append  }  = cfg\n  #.........................................................................................................\n  if text is ''\n    yield { lnr: 1, line: '', eol: '', }\n    return null\n  #.........................................................................................................\n  lnr           = 0\n  pattern       = /(.*?)(\\r\\n|\\r|\\n|$)/suy\n  last_position = text.length - 1\n  #.........................................................................................................\n  loop\n    idx = pattern.lastIndex\n    break if pattern.lastIndex > last_position\n    break unless ( match = text.match pattern )?\n    [ linenl, line, eol, ] = match\n    lnr++\n    line  = match[ 1 ]\n    line  = line.trimEnd() if trim\n    line  = prepend + line  unless prepend  is ''\n    line  = line  + append  unless append   is ''\n    yield { lnr, line, eol, }\n  #.........................................................................................................\n  if ( text.match /(\\r|\\n)$/ )?\n    lnr++\n    yield { lnr, line: '', eol: '', }\n  #.........................................................................................................\n  return null\n\n\n\n\n\n\n\n\n"
  ]
}